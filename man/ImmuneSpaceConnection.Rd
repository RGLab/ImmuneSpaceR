% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ISCon.R
\docType{class}
\name{ImmuneSpaceConnection}
\alias{ImmuneSpaceConnection}
\alias{ISCon}
\alias{listDatasets}
\alias{listGEMatrices}
\alias{listGEAnalysis}
\alias{listParticipantGroups}
\alias{listParticipantMatrices}
\alias{listWorkspaces}
\alias{listGatingSets}
\alias{summarizeCyto}
\alias{summarizeGatingSet}
\alias{loadGatingSet}
\alias{getDataset}
\alias{getGEMatrix}
\alias{getGEAnalysis}
\alias{getGEFiles}
\alias{getGEInputs}
\alias{getParticipantData}
\alias{getParticipantGEMatrix}
\alias{addTreatmentt}
\alias{mapSampleNames}
\title{The ImmuneSpaceConnection class}
\value{
An instance of an ImmuneSpaceConnection for a study in
\code{labkey.url.path}.
}
\description{
A connection respresents a study or a set of studies available on ImmuneSpace.
It provides function to download and display the data within these studies.
}
\details{
The ImmuneSpaceConnection will initialize itself, and look for a
\code{.netrc} file in \code{"~/"} the user's home directory. The
\code{.netrc} file should contain a \code{machine}, \code{login}, and
\code{password} entry to allow access to ImmuneSpace, where \code{machine} is
the host name like "www.immunespace.org".

It can also use global variables \code{labkey.url.base}, and
\code{labkey.url.path}, to access a study. \code{labkey.url.base} should be
\code{https://www.immunespace.org/}. \code{labkey.url.path} should be
\code{/Studies/studyname}, where 'studyname' is the accession number of the
study.
}
\section{Constructor}{

\code{\link{CreateConnection}}
}

\section{Fields}{

\describe{
  \item{\code{study}}{
    A \code{character}. The study accession number. Use an empty string ("")
    to create a connection at the project level.
  }
  \item{\code{availableDatasets}}{
    A \code{data.table}. The table of datasets available in the connection
    object.
  }
  \item{\code{cache}}{
    A \code{list}. Stores the data to avoid downloading the same tables
    multiple times.
  }
  \item{\code{config}}{
    A \code{list}. Stores configuration of the connection object such as
    URL, path and username.
  }
}
}

\section{Methods}{

\describe{
  \item{\code{initialize()}}{
    Initialize \code{ImmuneSpaceConnection} class.
    See \code{\link{CreateConnection}}.
  }
  \item{\code{print()}}{
    Print \code{ImmuneSpaceConnection} class.
  }
  \item{\code{listDatasets(output = c("datasets", "expression"))}}{
    Lists the datasets available in the study or studies of the connection.
  }
  \item{\code{listGEMatrices(verbose = FALSE, reload = FALSE, participantIds = NULL)}}{
    Lists available gene expression matrices for the connection.

    \code{verbose}: A logical. If TRUE, whether to print the extra details
    for troubleshooting.

    \code{reload}: A logical. If TRUE, retrieve the table of available gene
    expression matrices whether a cached version exist or not.

    \code{participantIds}: A character vector of participant ids to filter
    by. Only matrices with data from \code{participantIds} will be returned.
    If \code{NULL}, all matrices are returned.
  }
  \item{\code{listGEAnalysis()}}{
    Lists available gene expression analysis for the connection.
  }
  \item{\code{listParticipantGroups()}}{
    Lists available participant groups on the ImmuneSpace portal.
  }
  \item{\code{listParticipantGEMatrices(group, verbose = FALSE)}}{
    Lists available gene expression matrices for participants in \code{group}.

    \code{group}: A character or integer.
    Call \code{con$listParticipantGroups()} to see available participants
    groups. Use group_id or group_name as input.

    \code{verbose}: A logical. If TRUE, whether to print the extra details
    for troubleshooting.

  }
  \item{\code{listWorkspaces(reload = FALSE)}}{
    Lists available workspaces for the connection.

    \code{reload}: A logical. If TRUE, download the table whether a cached
    version exist or not.
  }
  \item{\code{listGatingSets(reload = FALSE)}}{
    Lists available gating sets for the connection.

    \code{reload}: A logical. If TRUE, download the table whether a cached
    version exist or not.
  }
  \item{\code{summarizeCyto()}}{
    Prints a summary of cytometry data for the connection.
  }
  \item{\code{summarizeGatingSet(gatingSet)}}{
    Prints a summary of a gating set. Note that this method currently works
    only in the ImmuneSpace RStudio session.

    \code{gatingSet}: A character. The name of the gating set to summarize.
  }
  \item{\code{loadGatingSet(gatingSet)}}{
    Loads a gating set via \code{flowWorkspace::load_gs} to the
    current environment. Note that this method currently works only in the
    ImmuneSpace RStudio Docker session.

    \code{gatingSet}: A character. The name of the gating set to load.
  }
  \item{\code{getDataset(x, original_view = FALSE, reload = FALSE,
  colFilter = NULL, ...)}}{
    Get a dataset form the connection.

    \code{x}: A character. The name of the dataset to download.

    \code{original_view}: A logical. If TRUE, download the original ImmPort
    view; else, download the default grid view.

    \code{reload}: A logical. If TRUE, download the dataset whether a cached
    version exist or not.

    \code{colFilter}: A character. A filter as returned by Rlabkey's
    \code{makeFilter} function.

    \code{...}: Extra arguments to be passed to \code{labkey.selectRows}.
  }
  \item{\code{getGEMatrix(matrixName = NULL, cohortType = NULL,
  outputType = "summary", annotation = "latest", reload = FALSE,
  verbose = FALSE)}}{
    Downloads a probe-level or gene-symbol summarized expression matrix from
    ImmuneSpace and constructs an ExpressionSet. Use \code{experimentData()}
    on the resulting ExpressionSet object to see version info for annotation.

    \code{matrixName}: A character. The name of the gene expression matrix
    to download.

    \code{cohortType}: A character. The name of a cohortType that has an
    associated gene expression matrix. Note that if this argument is not
    NULL, then \code{matrixName} is ignored. CohortType is a concatenation of
    "cohort" and "cell type" that allows the user to specify a matrix for the
    cell type subset of a cohort.

    \code{outputType}: A character. one of 'raw', 'normalized' or 'summary'.
    If 'raw', returns an expression matrix of non-normalized values by probe.
    'normalized' returns normalized values by probe. 'summary' returns
    normalized values averaged by gene symbol.

    \code{annotation}: A character. one of 'default', 'latest', or 'ImmSig'.
    Determines which feature annotation set (FAS) is used. 'default' uses the
    FAS from when the matrix was generated. latest' uses a recently updated
    FAS based on the original. 'ImmSig' is specific to studies involved in
    the ImmuneSignatures project and uses the annotation from when the
    meta-study's manuscript was created.

    \code{reload}: A logical. If set to TRUE, the matrix will be downloaded
    again, even if a cached copy exists in the ImmuneSpaceConnection object.

    \code{verbose}: A logical. If set to TRUE, notes on how the expressionSet
    object was created will be printed, including normalization, summarization,
    feature_annotation_set, and alias2symbol mapping version of org.Hs.eg.db.
  }
  \item{\code{getGEAnalysis(...)}}{
    Downloads data from the gene expression analysis results table.

    \code{...}: A list of arguments to be passed to \code{labkey.selectRows}.
  }
  \item{\code{getGEInputs()}}{
    Downloads data from the gene expression input samples table.
  }
  \item{\code{getParticipantData(group, dataType, original_view = FALSE,
  ...)}}{
    Returns a data.table with data subset by participant group.

    \code{group}: A character or integer.
    Call \code{con$listParticipantGroups()} to see available participants
    groups. Use group_id or group_name as input.

    \code{dataType}: A character. Use \code{con$availableDatasets} to see
    available dataset names.
  }
  \item{\code{getParticipantGEMatrix(group, outputType = "summary",
  annotation = "latest", reload = FALSE)}}{
    Downloads probe-level or gene-symbol summarized expression matrices for all
    participants within \code{group} from ImmuneSpace and constructs an
    ExpressionSet containing observations for each participant in \code{group}
    where gene expression data is available.

    \code{group}: A character or integer.
    Call \code{con$listParticipantGroups()} to see available participants
    groups. Use group_id or group_name as input.

    \code{outputType}: A character. one of 'raw', 'normalized' or 'summary'.
    If 'raw', returns an expression matrix of non-normalized values by probe.
    'normalized' returns normalized values by probe. 'summary' returns
    normalized values averaged by gene symbol.

    \code{annotation}: A character. one of 'default', 'latest', or 'ImmSig'.
    Determines which feature annotation set (FAS) is used. 'default' uses the
    FAS from when the matrix was generated. latest' uses a recently updated
    FAS based on the original. 'ImmSig' is specific to studies involved in
    the ImmuneSignatures project and uses the annotation from when the
    meta-study's manuscript was created.

    \code{reload}: A logical. If set to TRUE, matrices will be downloaded
    again, even if a cached copy exists in the ImmuneSpaceConnection object.

  }
  \item{\code{downloadGEFiles(files, destdir = ".")}}{
    Downloads gene expression raw data files.

    \code{files}: A character. Filenames as shown on the
    gene_expression_files dataset.

    \code{destdir}: A character. The local path to store the downloaded
    files.
  }
  \item{\code{addTreatment(expressionSet)}}{
    Adds treatment information to the phenoData of an ExpressionSet.

    \code{expressionSet}: An ExpressionSet. The ExpressionSet object that has
    been downloaded from the connection.
  }
  \item{\code{mapSampleNames(EM = NULL, colType = "participant_id")}}{
    Changes the sampleNames of an ExpressionSet fetched by \code{getGEMatrix}
    using the information in the phenodData slot.

    \code{EM}: An ExpressionSet, as returned by \code{getGEMatrix}.

    \code{colType}: A character. The type of column names. Valid options are
    'expsample_accession' and 'participant_id'.
  }
  \item{\code{plot(...)}}{
    Visualizes a selected dataset. This method is used by the DataExplorer
    module on the ImmuneSpace portal.

    \code{dataset}: A character. The name of the dataset to plot, as
    displayed by the listDataset method.

    \code{normalize_to_baseline}: A logical. If TRUE, the values are plotted
    as log2 fold-change from baseline.

    \code{type}: A character. The type of plot. Valid choices are 'auto',
    'heatmap', 'boxplot', 'lineplot', 'violinplot'. If set to 'auto', the
    function will select an appropriate plot type for the selected data.

    \code{filter}: A filter as created by the makeFilter function from
    Rlabkey.

    \code{facet}: The facetting for ggplot2 based plots. Valid choices are
    'grid' and 'wrap'.

    \code{text_size}: The size of all text elements in the plot.

    \code{legend}: A character. Columns of the dataset or demographics to be
    added as legend on the heatmap. This argument is ignored if the plot type
    isn't heatmap.

    \code{show_virus_strain}: A logical. Should all the virus strains be
    shown or should the values be averaged. Only used when dataset = 'hai'.

    \code{interactive}: A logical. If TRUE, an interactive plot will be
    created. The default is FALSE.

    \code{...}: Extra argument to be passed to ggplot. e.g: shape = 'Age',
    color = 'Race'.
  }
  \item{\code{clearCache()}}{
    Clears the cache. Removes downloaded datasets and expression matrices.
  }
}
}

\examples{
\dontrun{
# Create a connection (Initiate a ImmuneSpaceConnection object)
sdy269 <- CreateConnection("SDY269")

# Print the connection object
sdy269

# Retrieve the HAI dataset
HAI <- sdy269$getDataset("hai")

# Fetch a summarized gene expresssion matrix with latest annotation
LAIV <- sdy269$getGEMatrix("LAIV_2008")

# Visualize the ELISA dataset
sdy269$plot("elisa")
}

sdy <- try(CreateConnection("SDY269"))
if (inherits(sdy, "try-error")) {
  warning("Read the Introduction vignette for more information on how to set
up a .netrc file.")
}
}
\seealso{
\code{\link{CreateConnection}} \code{\link{ImmuneSpaceR-package}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-listWorkspaces}{\code{ISCon$listWorkspaces()}}
\item \href{#method-listGatingSets}{\code{ISCon$listGatingSets()}}
\item \href{#method-summarizeCyto}{\code{ISCon$summarizeCyto()}}
\item \href{#method-summarizeGatingSet}{\code{ISCon$summarizeGatingSet()}}
\item \href{#method-loadGatingSet}{\code{ISCon$loadGatingSet()}}
\item \href{#method-listDatasets}{\code{ISCon$listDatasets()}}
\item \href{#method-getDataset}{\code{ISCon$getDataset()}}
\item \href{#method-listGEMatrices}{\code{ISCon$listGEMatrices()}}
\item \href{#method-listGEAnalysis}{\code{ISCon$listGEAnalysis()}}
\item \href{#method-getGEMatrix}{\code{ISCon$getGEMatrix()}}
\item \href{#method-getGEAnalysis}{\code{ISCon$getGEAnalysis()}}
\item \href{#method-getGEInputs}{\code{ISCon$getGEInputs()}}
\item \href{#method-getGEFiles}{\code{ISCon$getGEFiles()}}
\item \href{#method-downloadGEFiles}{\code{ISCon$downloadGEFiles()}}
\item \href{#method-addTreatment}{\code{ISCon$addTreatment()}}
\item \href{#method-mapSampleNames}{\code{ISCon$mapSampleNames()}}
\item \href{#method-listParticipantGroups}{\code{ISCon$listParticipantGroups()}}
\item \href{#method-getParticipantData}{\code{ISCon$getParticipantData()}}
\item \href{#method-listParticipantGEMatrices}{\code{ISCon$listParticipantGEMatrices()}}
\item \href{#method-getParticipantGEMatrix}{\code{ISCon$getParticipantGEMatrix()}}
\item \href{#method-plot}{\code{ISCon$plot()}}
\item \href{#method-print}{\code{ISCon$print()}}
\item \href{#method-clearCache}{\code{ISCon$clearCache()}}
\item \href{#method-new}{\code{ISCon$new()}}
\item \href{#method-clone}{\code{ISCon$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-listWorkspaces"></a>}}
\if{latex}{\out{\hypertarget{method-listWorkspaces}{}}}
\subsection{Method \code{listWorkspaces()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$listWorkspaces(reload = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-listGatingSets"></a>}}
\if{latex}{\out{\hypertarget{method-listGatingSets}{}}}
\subsection{Method \code{listGatingSets()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$listGatingSets(reload = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-summarizeCyto"></a>}}
\if{latex}{\out{\hypertarget{method-summarizeCyto}{}}}
\subsection{Method \code{summarizeCyto()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$summarizeCyto()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-summarizeGatingSet"></a>}}
\if{latex}{\out{\hypertarget{method-summarizeGatingSet}{}}}
\subsection{Method \code{summarizeGatingSet()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$summarizeGatingSet(gatingSet)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-loadGatingSet"></a>}}
\if{latex}{\out{\hypertarget{method-loadGatingSet}{}}}
\subsection{Method \code{loadGatingSet()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$loadGatingSet(gatingSet)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-listDatasets"></a>}}
\if{latex}{\out{\hypertarget{method-listDatasets}{}}}
\subsection{Method \code{listDatasets()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$listDatasets(output = c("datasets", "expression"))}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getDataset"></a>}}
\if{latex}{\out{\hypertarget{method-getDataset}{}}}
\subsection{Method \code{getDataset()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$getDataset(
  x,
  original_view = FALSE,
  reload = FALSE,
  colFilter = NULL,
  transformMethod = "none",
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-listGEMatrices"></a>}}
\if{latex}{\out{\hypertarget{method-listGEMatrices}{}}}
\subsection{Method \code{listGEMatrices()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$listGEMatrices(verbose = FALSE, reload = FALSE, participantIds = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-listGEAnalysis"></a>}}
\if{latex}{\out{\hypertarget{method-listGEAnalysis}{}}}
\subsection{Method \code{listGEAnalysis()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$listGEAnalysis()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getGEMatrix"></a>}}
\if{latex}{\out{\hypertarget{method-getGEMatrix}{}}}
\subsection{Method \code{getGEMatrix()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$getGEMatrix(
  matrixName = NULL,
  cohortType = NULL,
  outputType = "summary",
  annotation = "latest",
  reload = FALSE,
  verbose = FALSE
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getGEAnalysis"></a>}}
\if{latex}{\out{\hypertarget{method-getGEAnalysis}{}}}
\subsection{Method \code{getGEAnalysis()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$getGEAnalysis(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getGEInputs"></a>}}
\if{latex}{\out{\hypertarget{method-getGEInputs}{}}}
\subsection{Method \code{getGEInputs()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$getGEInputs()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getGEFiles"></a>}}
\if{latex}{\out{\hypertarget{method-getGEFiles}{}}}
\subsection{Method \code{getGEFiles()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$getGEFiles(files, destdir = ".", quiet = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-downloadGEFiles"></a>}}
\if{latex}{\out{\hypertarget{method-downloadGEFiles}{}}}
\subsection{Method \code{downloadGEFiles()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$downloadGEFiles(files, destdir = ".")}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-addTreatment"></a>}}
\if{latex}{\out{\hypertarget{method-addTreatment}{}}}
\subsection{Method \code{addTreatment()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$addTreatment(expressionSet)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-mapSampleNames"></a>}}
\if{latex}{\out{\hypertarget{method-mapSampleNames}{}}}
\subsection{Method \code{mapSampleNames()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$mapSampleNames(EM = NULL, colType = "participant_id")}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-listParticipantGroups"></a>}}
\if{latex}{\out{\hypertarget{method-listParticipantGroups}{}}}
\subsection{Method \code{listParticipantGroups()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$listParticipantGroups()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getParticipantData"></a>}}
\if{latex}{\out{\hypertarget{method-getParticipantData}{}}}
\subsection{Method \code{getParticipantData()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$getParticipantData(
  group,
  dataType,
  original_view = FALSE,
  reload = FALSE,
  colFilter = NULL,
  transformMethod = "none",
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-listParticipantGEMatrices"></a>}}
\if{latex}{\out{\hypertarget{method-listParticipantGEMatrices}{}}}
\subsection{Method \code{listParticipantGEMatrices()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$listParticipantGEMatrices(group, verbose = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getParticipantGEMatrix"></a>}}
\if{latex}{\out{\hypertarget{method-getParticipantGEMatrix}{}}}
\subsection{Method \code{getParticipantGEMatrix()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$getParticipantGEMatrix(
  group,
  outputType = "summary",
  annotation = "latest",
  reload = FALSE
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-plot"></a>}}
\if{latex}{\out{\hypertarget{method-plot}{}}}
\subsection{Method \code{plot()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$plot(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clearCache"></a>}}
\if{latex}{\out{\hypertarget{method-clearCache}{}}}
\subsection{Method \code{clearCache()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$clearCache()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$new(
  study = NULL,
  login = NULL,
  password = NULL,
  verbose = FALSE,
  onTest = FALSE
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ISCon$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
