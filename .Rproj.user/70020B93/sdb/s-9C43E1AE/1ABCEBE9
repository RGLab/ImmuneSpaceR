{
    "contents" : "#'@docType package\n#'@title A Thin Wrapper Around Immunspace.\n#'@description ImmuneSpaceR provides a convenient API for accessing data sets within the ImmuneSpace database.\n#'\n#'@details Uses the Rlabkey package to connect to ImmuneSpace. Implements caching, and convenient methods for accessing data sets.\n#'\n#'@name ImmuneSpaceR-package\n#'@aliases ImmuneSpaceR\n#'@author Greg Finak\n#'@import data.table Rlabkey methods Biobase\nNULL\n\n#'@title CreateConnection\n#'@name CreateConnection\n#'@param study \\code{\"character\"} vector naming the study.\n#'@description Constructor for \\code{ImmuneSpaceConnection} class\n#'@details Instantiates and \\code{ImmuneSpaceConnection} for \\code{study}\n#'The constructor will try to take the values of the various `labkey.*` parameters from the global environment.\n#'If they don't exist, it will use default values. These are assigned to `options`, which are then used by the \\code{ImmuneSpaceConnection} class.\n#'@export CreateConnection\n#'@return an instance of an \\code{ImmuneSpaceConnection}\nCreateConnection = function(study=NULL){\n  labkey.url.path<-try(get(\"labkey.url.path\",.GlobalEnv),silent=TRUE)\n  if(inherits(labkey.url.path,\"try-error\")){\n    if(is.null(study)){\n      stop(\"study cannot be NULL\")\n    }\n    labkey.url.path<-paste0(\"/Studies/\",study)\n  }else if(!is.null(study)){\n    labkey.url.path<-file.path(dirname(labkey.url.path),study)\n  }\n  labkey.url.base<-try(get(\"labkey.url.base\",.GlobalEnv),silent=TRUE)\n  if(inherits(labkey.url.base,\"try-error\"))\n    labkey.url.base<-\"https://www.immunespace.org\"\n  labkey.url.base<-gsub(\"http:\",\"https:\",labkey.url.base)\n  labkey.user.email<-try(get(\"labkey.user.email\",.GlobalEnv),silent=TRUE)\n  if(inherits(labkey.user.email,\"try-error\"))\n    labkey.user.email=\"unknown_user at not_a_domain.com\"\n  \n  \n  options(labkey.url.base=labkey.url.base)\n  options(labkey.url.path=labkey.url.path)\n  options(labkey.user.email=labkey.user.email)\n  \n  new(\"ImmuneSpaceConnection\")\n}\n\n#'@name ImmuneSpaceConnection\n#'@aliases ImmuneSpaceConnection-class\n#'@aliases ImmuneSpace\n#'@rdname ImmuneSpaceConnection-class\n#'@docType class\n#'@title The ImmuneSpaceConnection class\n#'@description Instantiate this class to access a study\n#'@details Uses global variables \\code{labkey.url.base}, and \\code{labkey.url.path}, to access a study.\n#'\\code{labkey.url.base} should be \\code{https://www.immunespace.org/}.\n#'\\code{labkey.url.path} should be \\code{/Studies/studyname}, where 'studyname' is the name of the study.\n#'The ImmunspaceConnection will initialize itself, and look for a \\code{.netrc} file in \\code{\"~/\"} the user's home directory.\n#'The \\code{.netrc} file should contain a \\code{machine}, \\code{login}, and \\code{password} entry to allow access to ImmuneSpace,\n#'where \\code{machine} is the host name like \"www.immunespace.org\".\n#'@seealso \\code{\\link{ImmuneSpaceR-package}} \\code{\\link{ImmuneSpaceConnection_getGEMatrix}}  \\code{\\link{ImmuneSpaceConnection_getDataset}}  \\code{\\link{ImmuneSpaceConnection_listDatasets}}\n#'@exportClass ImmuneSpaceConnection\n#'@examples\n#'labkey.url.base=\"https://www.immunespace.org\"\n#'labkey.url.path=\"/Studies/SDY269\"\n#'labkey.user.email='gfinak at fhcrc.org'\n#'sdy269<-CreateConnection(\"SDY269\")\n#'sdy269\n#'@return An instance of an ImmuneSpaceConnection for a study in `labkey.url.path`\nsetRefClass(Class = \"ImmuneSpaceConnection\",fields = list(study=\"character\",config=\"list\",available_datasets=\"data.table\",data_cache=\"list\",constants=\"list\"),\n            methods=list(\n              initialize=function(){\n                constants<<-list(matrices=\"GE_matrices\",matrix_inputs=\"GE_inputs\")\n                .AutoConfig()\n                gematrices_success<-try(.GeneExpressionMatrices(),silent=TRUE)\n                geinputs_success<-try(.GeneExpressionInputs(),silent=TRUE)\n                if(inherits(gematrices_success,\"try-error\")){\n                  message(\"No gene expression data\")\n                }\n              },\n              \n              .AutoConfig=function(){\n                #should use options\n                labkey.url.base<-getOption(\"labkey.url.base\")\n                labkey.url.path<-getOption(\"labkey.url.path\")\n                labkey.user.email<-getOption(\"labkey.user.email\")\n                curlOptions <- curlOptions(netrc=TRUE,ssl.verifyhost=FALSE,\n                                            httpauth=1L,ssl.verifypeer=FALSE,\n                                            followlocation=TRUE,verbose=FALSE,\n                                            ssl.cipher.list=\"ALL\")\n                study<<-basename(labkey.url.path)\n                config<<-list(labkey.url.base=labkey.url.base,\n                              labkey.url.path=labkey.url.path,\n                              labkey.user.email=labkey.user.email,\n                              curlOptions = curlOptions)\n                .getAvailableDataSets();\n              },\n              \n            show=function(){\n              cat(sprintf(\"Immunspace Connection to study %s\\n\",study))\n              cat(sprintf(\"URL: %s\\n\",file.path(gsub(\"/$\",\"\",config$labkey.url.base),gsub(\"^/\",\"\",config$labkey.url.path))))\n              cat(sprintf(\"User: %s\\n\",config$labkey.user.email))\n              cat(\"Available datasets\\n\")\n              for(i in 1:nrow(available_datasets)){\n                cat(sprintf(\"\\t%s\\n\",available_datasets[i,Name]))\n              }\n              if(!is.null(data_cache[[constants$matrices]])){\n                cat(\"Expression Matrices\\n\")\n                for(i in 1:nrow(data_cache[[constants$matrices]])){\n                  cat(sprintf(\"%s\\n\",data_cache[[constants$matrices]][i,\"name\"]))\n                }\n              }\n            },\n            \n            .getAvailableDataSets=function(){\n              if(length(available_datasets)==0){\n                available_datasets<<-data.table(labkey.selectRows(baseUrl = config$labkey.url.base,config$labkey.url.path,schemaName = \"study\",queryName = \"DataSets\"))[,list(Label,Name,Description,`Key Property Name`)]\n              }\n            },\n            \n            getDataset=function(x,reload=FALSE){\n              if(nrow(available_datasets[Name%in%x])==0){\n                stop(sprintf(\"Invalid data set: %s\",x))\n              }else{\n                if(!is.null(data_cache[[x]])&!reload){\n                  data_cache[[x]]\n                }else{\n                  data_cache[[x]]<<-data.table(labkey.selectRows(baseUrl = config$labkey.url.base,config$labkey.url.path,schemaName = \"study\",queryName = x,colNameOpt = \"fieldname\")) \n                  setnames(data_cache[[x]],.munge(colnames(data_cache[[x]])))\n                  data_cache[[x]]\n                }                \n              }\n            },\n            \n            listDatasets=function(){\n              for(i in 1:nrow(available_datasets)){\n                cat(sprintf(\"\\t%s\\n\",available_datasets[i,Name]))\n              }\n              if(!is.null(data_cache[[constants$matrices]])){\n                cat(\"Expression Matrices\\n\")\n                for(i in 1:nrow(data_cache[[constants$matrices]])){\n                  cat(sprintf(\"%s\\n\",data_cache[[constants$matrices]][i,\"name\"]))\n                }\n              }\n            },\n            \n            .munge=function(x){\n              tolower(gsub(\" \",\"_\",basename(x)))\n            },\n            \n            .GeneExpressionInputs=function(){\n              if(!is.null(data_cache[[constants$matrix_inputs]])){\n                data_cache[[constants$matrix_inputs]]\n              }else{\n                ge<-labkey.selectRows(baseUrl = config$labkey.url.base,config$labkey.url.path,schemaName = \"assay.ExpressionMatrix.matrix\",queryName = \"InputSamples\",colNameOpt = \"fieldname\",viewName = \"gene_expression_matrices\",showHidden=TRUE)\n                setnames(ge,.munge(colnames(ge)))\n                data_cache[[constants$matrix_inputs]]<<-ge\n              }\n            },\n            \n            .GeneExpressionFeatures=function(matrix_name){\n              if(!any((data_cache[[constants$matrices]][,\"name\"]%in%matrix_name))){\n                stop(\"Invalid gene expression matrix name\");\n              }\n              annotation_set_id<-.getFeatureId(matrix_name)\n              if(is.null(data_cache[[.mungeFeatureId(annotation_set_id)]])){\n                message(\"Downloading Features..\")\n                featureAnnotationSetQuery=sprintf(\"SELECT * from FeatureAnnotation where FeatureAnnotationSetId='%s';\",annotation_set_id);\n                features<-labkey.executeSql(config$labkey.url.base,config$labkey.url.path,schemaName = \"Microarray\",sql = featureAnnotationSetQuery ,colNameOpt = \"fieldname\")\n                data_cache[[.mungeFeatureId(annotation_set_id)]]<<-features\n              }\n            },\n            \n            .GeneExpressionMatrices=function(){\n              if(!is.null(data_cache[[constants$matrices]])){\n                data_cache[[constants$matrices]]\n              }else{\n                ge<-labkey.selectRows(baseUrl = config$labkey.url.base,config$labkey.url.path,schemaName = \"assay.ExpressionMatrix.matrix\",queryName = \"Runs\",colNameOpt = \"fieldname\",showHidden = TRUE, viewName = \"expression_matrices\")\n                setnames(ge,.munge(colnames(ge)))\n                data_cache[[constants$matrices]]<<-ge\n              }\n            },\n            \n            .downloadMatrix=function(x, summary = FALSE){\n              if(is.null(data_cache[[x]])){\n                if(nrow(subset(data_cache[[constants$matrices]],name%in%x))==0){\n                  stop(sprintf(\"No matrix %s in study\\n\",x))\n                }\n                summary <- ifelse(summary, \".summary\", \"\")\n                #link<-URLdecode(file.path(gsub(\"www.\",\"\",gsub(\"http:\",\"https:\",gsub(\"/$\",\"\",config$labkey.url.base))), paste0(gsub(\"^/\",\"\",subset(data_cache[[constants$matrices]],name%in%x)[,\"downloadlink\"]),summary)))\n                link<-URLdecode(file.path(gsub(\"www.\",\"\",gsub(\"http:\",\"https:\",gsub(\"/$\",\"\",config$labkey.url.base))),\n                                          \"_webdav\", config$labkey.url.path, \"@files/analysis/exprs_matrices\",\n                                          paste0(x, \".tsv\", summary)))\n                opts <- config$curlOptions\n                handle<-getCurlHandle(.opts=opts)\n                h<-basicTextGatherer()\n                message(\"Downloading matrix..\")\n                curlPerform(url=link,curl=handle,writefunction=h$update)\n                fl<-tempfile()\n                write(h$value(),file=fl)\n                data_cache[[x]]<<-fread(fl,header=TRUE)\n                file.remove(fl)\n              }else{\n                data_cache[[x]]\n              }\n            },\n            \n            getGEMatrix=function(x, summary = FALSE){\n              if(x%in%names(data_cache)){\n                data_cache[[x]]              \n              }else{\n                .downloadMatrix(x, summary)\n                .GeneExpressionFeatures(x)\n                .ConstructExpressionSet(x, summary)\n                data_cache[[x]]\n              }\n            },\n          .ConstructExpressionSet=function(matrix_name, summary){\n            #matrix\n            message(\"Constructing ExpressionSet\")\n            matrix<-data_cache[[matrix_name]]\n            #features\n            features<-data_cache[[.mungeFeatureId(.getFeatureId(matrix_name))]][,c(\"FeatureId\",\"GeneSymbol\")]\n            #inputs\n            pheno<-unique(subset(data_cache[[constants$matrix_inputs]],biosample_accession%in%colnames(matrix))[,c(\"biosample_accession\",\"subject_accession\",\"arm_name\",\"study_time_collected\")])\n            \n            if(summary){\n              fdata <- data.frame(FeatureId = matrix$gene_symbol, gene_symbol = matrix$gene_symbol, row.names = matrix$gene_symbol)\n              fdata <- AnnotatedDataFrame(fdata)\n            } else{\n              try(setnames(matrix,\" \",\"FeatureId\"),silent=TRUE)\n              setkey(matrix,FeatureId)\n              rownames(features)<-features$FeatureId\n              features<-features[matrix$FeatureId,]#order feature info\n              fdata <- AnnotatedDataFrame(features)\n            }\n            rownames(pheno)<-pheno$biosample_accession\n            pheno<-pheno[colnames(matrix)[-1L],]\n            ad_pheno<-AnnotatedDataFrame(data=pheno)\n            es<-ExpressionSet(assayData=as.matrix(matrix[,-1L,with=FALSE]),phenoData=ad_pheno,featureData=fdata)\n            data_cache[[matrix_name]]<<-es\n          },\n          .getFeatureId=function(matrix_name){\n            subset(data_cache[[constants$matrices]],name%in%matrix_name)[,\"featureset\"]\n          },\n          .mungeFeatureId=function(annotation_set_id){\n            return(sprintf(\"featureset_%s\",annotation_set_id))\n          }\n))\n\n#'@title get Gene Expression Matrix\n#'@aliases getGEMatrix\n#'@param x \\code{\"character\"} name of the Gene Expression Matrix\n#'@details Returns an `ExpressionSet` from the matrix named 'x', downloads it if it is not already cached.\n#'@return an \\code{ExpressionSet}\n#'@name ImmuneSpaceConnection_getGEMatrix\n#'@examples\n#'labkey.url.base=\"https://www.immunespace.org\"\n#'labkey.url.path=\"/Studies/SDY269\"\n#'labkey.user.email='gfinak at fhcrc.org'\n#'sdy269<-CreateConnection(\"SDY269\")\n#'sdy269$getGEMatrix(\"TIV_2008\")\nNULL\n\n#'@title get a dataset\n#'@aliases getDataset\n#'@param x \\code{\"character\"} name of the dataset\n#'@details Returns the dataset named 'x', downloads it if it is not already cached.\n#'@return a \\code{data.table}\n#'@name ImmuneSpaceConnection_getDataset\n#'@examples\n#'labkey.url.base=\"https://www.immunespace.org\"\n#'labkey.url.path=\"/Studies/SDY269\"\n#'labkey.user.email='gfinak at fhcrc.org'\n#'sdy269<-CreateConnection(\"SDY269\")\n#'sdy269$getDataset(\"hai\")\nNULL\n\n#'@title list available datasets\n#'@aliases listDatasets\n#'@details Prints the names of the available datasets\n#'@return Doesn't return anything, just prints to console.\n#'@name ImmuneSpaceConnection_listDatasets\n#'@examples\n#'labkey.url.base=\"https://www.immunespace.org\"\n#'labkey.url.path=\"/Studies/SDY269\"\n#'labkey.user.email='gfinak at fhcrc.org'\n#'sdy269<-CreateConnection(\"SDY269\")\n#'sdy269$listDatasets()\nNULL\n",
    "created" : 1405112744495.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2194624910",
    "id" : "1ABCEBE9",
    "lastKnownWriteTime" : 1405122826,
    "path" : "~/workspace/git/ImmuneSpaceR/R/ImmuneSpace.R",
    "project_path" : "R/ImmuneSpace.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}